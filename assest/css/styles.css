/* Universal Selector */
/* * is known as the universal selector,and it sets a style for all of the elements 
  of an HTML page. */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    color: #39a6b2;
    font-family: Arial, Helvetica, sans-serif;
}

/* apply styles to <header> */
header {
    padding: 20px 35px;
    background-color: #39a6b2;
    /* To change a flexbox from a row to a column layout,
    you can use the flex-direction property with a value of column. */
    display: flex;
    justify-content: space-between;
    /* The flex-wrap property to instruct the container to let child elements break 
    onto the next line when when they don't fit on one line. */
    flex-wrap: wrap;

    /* The top property is important because this tells the browser where to "stick"
    the element. We always want the header to be at the very top of the viewport,
    so top: 0;makes the most sense. */

    /* Vendor prefix to allow position: sticky in Safari */
    position: -webkit-sticky;
    /* The top property is important because this tells the browser where to "stick"
    the element. We always want the header to be at the very top of the viewport,
    so top: 0;makes the most sense. */
    position: sticky;
    top: 0;

    background-image: url("../images/hero-bg.jpg.jpg");
    background-size: cover;
    background-position: 80%;
    background-attachment: fixed;
}

header h1 {
    font-weight: bold;
    font-size: 36px;
    color: #fce138;
    margin: 0;
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

header a {
    text-decoration: none;
    color: #fce138;
}

header nav {
    margin: 7px 0;
}

header nav ul {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    /* So by default, justify-content follows the horizontal axis and align-items 
    follows the vertical axis. However,if we were to change the value of flex-direction 
    to column,then the main axis and the cross axis would be flipped. The justify-content 
    property would thus follow the vertical axis (because it would become the main axis)
    and align-items would follow the horizontal (or cross) axis. */

    align-items: center;
    list-style: none;
}

header nav ul li a {
    padding: 10px 15px;
    font-weight: lighter;

    /*  viewport width: By setting the value to 1.55vw, we're telling the browser 
        that the font's size should be roughly 1.55% of the window's overall width. 
    */
    font-size: 1.55vw;
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

header nav ul li a:hover {
    background: #fce138;
    color: #024e76;
    border-radius: 15px;
    text-shadow: none;
}

footer {
    background: #fce138;
    width: 100%;
    padding: 40px 35px;
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

footer h2 {
    color: #024e76;
    font-size: 30px;
    margin: 0;
}

footer div {
    line-height: 1.5;
    text-align: right;
}

footer a {
    color: #024e76;
}

section {
    padding: 60px;
}

.hero {
    background-image: url("../images/hero-bg.jpg.jpg");


    /* The background-size property can set the size of the background image to 
    its original size or make it stretched, repeated, or constrained to fit the
    available space. In this case,we'll set it to cover to shrink the image so 
    that parts of it won't get clipped.
     */

    background-size: cover;
    /* The background-position property can set the initial position of the 
    background image. We'll set this position to center. */
    background-position: 80%;

    /* We need the background images of these two elements to essentially be in the 
    same place. Fortunately,
    we can do just that by using the declaration background-attachment: fixed;
    ,which places the image relative to the viewport instead of the element. */

    background-attachment: fixed;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    align-items: flex-start;

}

.hero-cta {
    width: 35%;
    text-align: right;
    margin: 3.5%;
    color: #fff;
    font-size: 18px;
    line-height: 1.2;
}

.hero-cta h2 {
    font-style: italic;
    font-size: 55px;
    color: #fce138;
    text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

.hero-cta p {
    color: white;
}

.hero-form {
    background-color: rgba(252, 225, 56, 0.8);
    padding: 20px;
    width: 40%;
    margin: 3.5%;
    color: #024e76;
    border: solid 3px #024e76;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    border-radius: 15px;
}

.hero-form h3 {
    font-size: 36px;
    margin: 0px;
}

.hero-form p {
    margin: 5px 0 15px 0;
}

.form-input {
    border: 1px solid #024e76;
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: #024e76;
    width: 100%;
    margin-bottom: 15px;
    border-radius: 10px;
    background-color: rgba(255, 255, 255, 0.75);
}

.form-input:focus {
    background-color: rgba(255, 255, 255, 1);
    outline: none;
}

.hero-form label {
    margin: 0 5px;
}

.hero-form button {
    background-color: #024e76;
    color: #fce138;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 10px;
}

.hero-form button:hover {
    background-color: #39a6b2;
}

/* .intro {
    text-align: center;
} */

.intro p {
    line-height: 1.7;
    color: #39a6b2;
    width: 80%;
    font-size: 20px;
    margin: 0px auto;
    text-align: center;
}


.section-title {
    font-size: 48px;
    color: #024e76;
    padding-bottom: 20px;
    text-align: center;
    margin: 0 auto 35px auto;
    width: 50%;
    border-bottom: 3px solid;
}

.primary-border {
    border-color: #fce138;
}

.secondary-border {
    border-color: #39a6b2;
}

.steps {
    background: #fce138;
}

/* .steps div {
    margin-bottom: 80px;
}

.steps img {
    width: 15%;
    margin: 10px 0;
} */

/* .steps span {
    font-size: 38px;
} */

.step {
    margin: 50px auto;
    padding-bottom: 50px;
    width: 80%;
    
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
}
/* This adds a border to every even-numbered child of the <section> */
.step:not(:last-child)
{
    border-bottom: 1px solid #39a6b2;
}

.step h3 {
    color: #024e76;
    font-size: 46px;
    flex: 1 30%;
}

.step-img {
    flex: 1 12%;
    margin-right: 20px;
}

.step-info {
    /* flex: <flex-grow value><flex-shrink value><flex-basis value>;

    flex: <flex-grow value><flex-basis value>;

    flex: <flex-grow value><flex-shrink value>; */

    flex: 2 70%;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
}

.step-text {
    flex: 12;
}

.step-text p {
    color: #39a6b2;
    font-size: 18px;
}

.step-text h4 {
    font-size: 26px;
    line-height: 1.5;
    color: #024e76;
}

.step-img img {
    max-width: 100%;
}


.trainers {
    width: 100%;
    margin: 0 auto;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
}

.trainer {

    margin: 20px;
    background: #024e76;
    color: #fce138;
    flex: 1;

}

.trainer img {
    width: 100%;
}

.trainer-bio {
    padding: 25px;
    line-height: 1.3;
}

.text-left {
    text-align: left;
}

.text-right {
    text-align: right;
}

.flex-row {
    display: flex;
}

.trainer-bio h3 {
    font-size: 28px;
}

.trainer-bio h4 {
    font-weight: lighter;
    font-size: 22px;
    margin-bottom: 15px;
}

.trainer-bio p {
    font-size: 17px;

}

.contact {
    background-color: #024e76;

}

.contact h2 {
    color: #fce138;
}

.contact-info {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

/* the * selector is saying "select all elements that are direct children of 
anything with a class of contact-info."The>symbol means it's looking specifically
for direct children of the element listed first. In this case, it's selecting 
all children of the element with contact-info as its class. */
.contact-info>* {
    flex: 1;
    margin: 15px;
}

.contact-info iframe {
    height: 400px;
}

/* Because the content of this <div>naturally rests at the bottom of the container,
we need the vertical-align property to lift this content up to the top. In 
conjunction with the text-align property,this allows the contact information to 
begin at the top of the <div>and start aligned from the left for an easy-to-read layout. */

.contact-info div {
    color: white;
}

.contact-info h3 {
    color: #fce138;
    font-size: 32px;
}

/* The comma separates the two selectors,
indicating that the subsequent declaration block will apply to both CSS selectors. */
.contact-info p,
.contact-info address {
    margin: 20px 0;
    line-height: 1.5;
    font-size: 16px;
    font-style: normal;
}

.contact-info a {
    color: #fce138;
}

.contact-form input,
.contact-form textarea {
    border: 1px solid #024e76;
    display: block;
    padding: 7px 15px;
    font-size: 16px;
    color: #024e76;
    width: 100%;
    margin-bottom: 15px;
    margin-top: 5px;
    border-radius: 10px;
    background-color: rgba(255, 255, 255, 0.75);
}
.contact-form input:focus, .contact-form textarea:focus
{
    background-color: rgba(255, 255, 255, 1);
    outline: none;
}

.contact-form button {
    width: 100%;
    border: none;
    background: #fce138;
    color: #024e76;
    text-align: center;
    padding: 15px 0;
    font-size: 16px;
    border-radius: 10px;
}

.contact-form button:hover {
    color: #fce138;
    background: #39a6b2;
}

@media screen and (max-width: 980px) {
    header {
        padding-bottom: 0;
        justify-content: center;
        position: relative;
    }

    header h1 {
        width: 100%;
        text-align: center;
    }

    header nav ul {
        margin-top: 20px;
        width: 100%;
        justify-content: center;
    }

    header nav ul li a {
        font-size: 20px;
    }

    header nav ul li a:hover {
        background: #fce138;
        color: #024e76;
        border-radius: 15px;
        text-shadow: none;
    }

    footer h2,
    footer div {
        text-align: center;
        width: 100%;
    }

    .hero-cta,
    .hero-form {
        width: 100%;
    }

    .hero-cta {
        text-align: center;
    }

    .section-title {
        width: 80%;
    }

    .trainer {
        flex: 0 70%;
    }

    .contact-info iframe {
        flex: 1 100%;
    }
}

@media screen and (max-width: 768px) {
    section {
        padding: 30px 15px;
    }

    section {
        padding: 30px 15px;
    }

    .step h3 {
        flex: 1 100%;
        text-align: center;
    }

    .step-info {
        flex: 2 100%;
        text-align: center;
        justify-content: center;
    }

    .step-img {
        flex: 0 32%;
        margin-right: 0;
        margin-top: 15px;
        margin-bottom: 15px;
    }

    .step-text {
        flex: 100%;
    }

}

@media screen and (max-width: 575px) {
    .hero-form button {
        width: 100%;
    }

    .section-title {
        width: 95%;
    }

    .intro p {
        width: 100%;
    }

    .trainer {
        flex: 0 100%;
    }

    .contact-info {
        text-align: center;
    }

    .contact-info>* {
        flex: 0 100%;
    }

    /* The order property can be extremely useful in cases like this because it 
      can rearrange how child elements appear on a page without moving the HTML. */
    .contact-form {
        order: 3;
    }
}